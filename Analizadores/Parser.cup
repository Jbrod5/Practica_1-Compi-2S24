package com.jbrod.graficador.analizadores;
import java_cup.runtime.*; 

import com.jbrod.graficador.graficos.Grafico; 
import com.jbrod.graficador.graficos.Circulo; 
import com.jbrod.graficador.graficos.Cuadrado; 
import com.jbrod.graficador.graficos.Rectangulo; 
import com.jbrod.graficador.graficos.Linea; 
import com.jbrod.graficador.graficos.Poligono;

import com.jbrod.graficador.ui.VistaDeTrabajo;
import java.awt.Color;

import com.jbrod.graficador.reportes.ReporteColores;
import com.jbrod.graficador.reportes.ReporteObjetos;
import com.jbrod.graficador.reportes.ReporteAnimaciones;



parser code{:

    // Conectar el parser al escaner
    private VistaDeTrabajo vista;

    private ReporteColores reporteColores;
    private ReporteObjetos reporteObjetos;
    private ReporteAnimaciones reporteAnimaciones; 



    public Parser(Lexer lex, VistaDeTrabajo vistaTrab){
        super(lex);
        this.vista = vistaTrab;
        System.out.println("Vista: " + vista);

        reporteColores = new ReporteColores();
        reporteObjetos = new ReporteObjetos();
        reporteAnimaciones = new ReporteAnimaciones(); 
    }
    public void setVista(VistaDeTrabajo vistaTrab){
        this.vista = vistaTrab;
        System.out.println("Vistados: " + vista);
    }

    public void syntax_error(Symbol cur_token) {
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
        }

    }

    public Color obtenerColor(String color){
        switch (color.toLowerCase()) {
            case "azul":
                return Color.BLUE;
            case "rojo":
                return Color.RED;
            case "amarillo":
                return Color.YELLOW;
            case "verde":
                return Color.GREEN;
            case "morado":
                return new Color(128, 0, 128); // Color morado personalizado
            case "naranja":
                return new Color(255, 165, 0); // Color naranja personalizado
            case "turquesa":
                return new Color(64, 224, 208); // Color turquesa personalizado
            case "negro":
                return Color.BLACK;
            case "cafe":
                return new Color(139, 69, 19); // Color café personalizado
            default:
                return Color.BLACK; // Retorna negro si no hay coincidencia
        }
    }
    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

    public ReporteColores obtenerReporteColores(){
        return reporteColores;
    }
    public ReporteObjetos obtenerReporteObjetos(){
        return reporteObjetos;
    }
    public ReporteAnimaciones obtenerReporteAnimaciones(){
        return reporteAnimaciones;
    }

:}

/* - - - - - - - - - - - - - - - - - - - - - - - Terminales - - - - - - - - - - - - - - - - - - - - - - - */
/* Numeros */
terminal NUMERO;

/* Operaciones / Simbolos */
terminal MULTIPLICACION, DIVISION, SUMA, RESTA, PARA, PARC, COMA;

/* Colores */
terminal AZUL, ROJO, AMARILLO, VERDE, MORADO, NARANJA, TURQUESA, NEGRO, CAFE;

/* Animación */
terminal LINEA, CURVA, ANIMAR, OBJETO, ANTERIOR;

/* Gráficos */
terminal GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, POLIGONO;

/* Identificadores */
terminal IDENTIFICADOR;

/* - - - - - - - - - - - - - - - - - - - - - - No terminales - - - - - - - - - - - - - - - - - - - - - - */
non terminal inicio; 

// Numeros
non terminal num; 

// Colores 
non terminal color; 

// Graficos
non terminal graficar, figura, animar, tipo_animacion; 


/* - - - - - - - - - - - - - - - - - - - - - - - Producciones - - - - - - - - - - - - - - - - - - - - - - - */

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

// Inicio
start with inicio; 
inicio ::= graficar;
inicio ::= animar; 
inicio ::= animar inicio;
inicio ::= graficar inicio; 


// Numeros
num ::= NUMERO:number {: RESULT = (double)number; :};

num ::= num:n1 MULTIPLICACION num:n2 {: RESULT = (double)n1 * (double)n2; :};
num ::= num:n1 DIVISION       num:n2 {: RESULT = (double)n1 / (double)n2; :}; 

num ::= PARA num:number PARC {: RESULT = (double)number; :};

num ::= num:n1 SUMA  num:n2 {: RESULT = (double)n1 + (double)n2; :}; 
num ::= num:n1 RESTA num:n2 {: RESULT = (double)n1 - (double)n2; :};

// Colores
//MODIFICAR: Retornar el color como se usa en la libreria, en exadecimal o etc
color ::= AZUL:c     {: RESULT = "AZUL"     ; reporteColores.aumentarAzul       ();:}; 
color ::= ROJO: c    {: RESULT = "ROJO"     ; reporteColores.aumentarRojo       ();:};
color ::= AMARILLO:c {: RESULT = "AMARILLO" ; reporteColores.aumentarAmarillo   ();:};
color ::= VERDE :c   {: RESULT = "VERDE"    ; reporteColores.aumentarVerde      ();:};
color ::= MORADO:c   {: RESULT = "MORADO"   ; reporteColores.aumentarMorado     ();:};
color ::= NARANJA:c  {: RESULT = "NARANJA"  ; reporteColores.aumentarNaranja    ();:};
color ::= TURQUESA:c {: RESULT = "TURQUESA" ; reporteColores.aumentarTurquesa   ();:};
color ::= NEGRO:c    {: RESULT = "NEGRO"    ; reporteColores.aumentarNegro      ();:};
color ::= CAFE:c     {: RESULT = "CAFE"     ; reporteColores.aumentarCafe       ();:};




//Graficos, ejecutar las graficas en figura
graficar ::= GRAFICAR figura; 

// nombre, posx, posy, tamaño lado, color 
figura ::= CUADRADO     PARA IDENTIFICADOR:nombre COMA num:posx COMA num:posy COMA num:tam_lado  COMA color:color PARC
            {: System.out.printf ("Graficare un CUADRADO llamado: + %s | posx: %.2f posy: %.2f  | lado: %.2f color: %s %n %n", nombre, posx, posy, tam_lado, color );
            vista.agregarFigura(new Cuadrado((String)nombre, (int)Math.round((double)posx), (int)Math.round((double)posy), (int)Math.round((double)tam_lado), obtenerColor((String)color))); 
            reporteObjetos.aumentarCuadrado(); :};
// nombre, posx, posy, ancho, alto, color 
figura ::= RECTANGULO   PARA IDENTIFICADOR:nombre COMA num:posx COMA num:posy COMA num:ancho COMA num:alto COMA color:color PARC
            {: System.out.printf ("Graficare un RECTANGULO llamado: + %s | posx: %.2f posy: %.2f  | ancho: %.2f alto: %.2f color: %s %n %n", nombre, posx, posy, ancho, alto, color );
            vista.agregarFigura(new Rectangulo((String)nombre, (int)Math.round((double)posx), (int)Math.round((double)posy), (int)Math.round((double)ancho), (int)Math.round((double)alto), obtenerColor((String)color))); 
            reporteObjetos.aumentarRectangulo(); :};
// nombre, posx1, posy1, posx2, posy2, color 
figura ::= LINEA        PARA IDENTIFICADOR:nombre COMA num:posx1 COMA num:posy1 COMA num:posx2 COMA num:posy2 COMA color: color PARC
            {: System.out.printf ("Graficare una LINEA llamada: + %s | posx1: %.2f posy1: %.2f | posx2: %.2f posy2: %.2f  | color: %s %n %n", nombre, posx1, posy1, posx2, posy2, color );
            vista.agregarFigura(new Linea((String)nombre, (int)Math.round((double)posx1), (int)Math.round((double)posy1), (int)Math.round((double)posx2), (int)Math.round((double)posy2), obtenerColor((String)color))); 
            reporteObjetos.aumentarLinea(); :};
// nombre, posx, posy, cantidad lados, ancho, alto, color 
figura ::= POLIGONO     PARA IDENTIFICADOR:nombre COMA num:posx COMA num:posy COMA num:cantidad_lados COMA num:ancho COMA num:alto COMA color:color PARC
            {: System.out.printf ("Graficare un POLIGONO llamado: + %s | posx: %.2f posy: %.2f  | lados: %.2f ancho: %.2f alto: %.2f color: %s %n %n", nombre, posx, posy, cantidad_lados, ancho, alto, color );
            vista.agregarFigura(new Poligono((String)nombre, (int)Math.round((double)posx), (int)Math.round((double)posy), (int)Math.round((double)cantidad_lados), (int)Math.round((double)ancho), (int)Math.round((double)alto), obtenerColor((String)color))); 
            reporteObjetos.aumentarPoligono(); :};

// nombre, posx, posy, radio, color 
figura ::= CIRCULO      PARA IDENTIFICADOR:nombre COMA num:posx COMA num:posy COMA num:radio COMA color:color PARC
            {: System.out.printf ("Graficare un CIRCULO llamado: + %s | posx: %.2f posy: %.2f  | radio: %.2f color: %s %n %n", nombre, posx, posy, radio, color );
            vista.agregarFigura(new Circulo((String)nombre, (int)Math.round((double)posx), (int)Math.round((double)posy), (int)Math.round((double)radio), obtenerColor((String)color))); 
            reporteObjetos.aumentarCirculo(); :};



// Animaciones: tipo, destinox, destinoy, orden 
animar ::= ANIMAR OBJETO ANTERIOR PARA tipo_animacion:tipo COMA num:destinox COMA num:destinoy COMA num:orden PARC
            {: System.out.printf ("Animare el objeto anterior de forma: | hacia x: %.2f   y: %.2f | orden: %.2f", destinox, destinoy, orden); 
                vista.agregarAnimacionUltimaFigura((boolean)tipo, (int)Math.round((double)destinox), (int)Math.round((double)destinoy), (int)Math.round((double)orden)); :};

tipo_animacion ::= LINEA{: RESULT = true;  reporteAnimaciones.aumentarLinea(); :};
tipo_animacion ::= CURVA{: RESULT = false; reporteAnimaciones.aumentarCurva(); :};